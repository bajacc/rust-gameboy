mod opcodes_const;

use opcodes_const::OPCODE_BYTES_LEN;

pub fn disassemble(mem: &[u8], number: usize) {
    let pos = 0;
    for _ in 0..number {
        let len = OPCODE_BYTES_LEN[mem[pos] as usize];
        if pos + len > mem.len() {
            return;
        }
        for i in pos..pos+len {
            print!("{:02x} ", mem[i]);
        }
        match mem[pos] {
            0xCB => disassemble_prefixed(mem, pos + 1),
            _ => disassemble_unprefixed(mem, pos)
        };
        pos += len;
    }
}

fn disassemble_unprefixed(mem: &[u8], pos: usize){
    match mem[pos] {
    0x00 => println!("NOP"),
    0x01 => println!("LD BC, {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0x02 => println!("LD (BC), A"),
    0x03 => println!("INC BC"),
    0x04 => println!("INC B"),
    0x05 => println!("DEC B"),
    0x06 => println!("LD B, {:#02x}", mem[pos + 1]),
    0x07 => println!("RLCA"),
    0x08 => println!("LD ({:#04x}), SP", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0x09 => println!("ADD HL, BC"),
    0x0A => println!("LD A, (BC)"),
    0x0B => println!("DEC BC"),
    0x0C => println!("INC C"),
    0x0D => println!("DEC C"),
    0x0E => println!("LD C, {:#02x}", mem[pos + 1]),
    0x0F => println!("RRCA"),
    0x10 => println!("STOP {:#02x}", mem[pos + 1]),
    0x11 => println!("LD DE, {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0x12 => println!("LD (DE), A"),
    0x13 => println!("INC DE"),
    0x14 => println!("INC D"),
    0x15 => println!("DEC D"),
    0x16 => println!("LD D, {:#02x}", mem[pos + 1]),
    0x17 => println!("RLA"),
    0x18 => println!("JR {}", mem[pos + 1] as i8),
    0x19 => println!("ADD HL, DE"),
    0x1A => println!("LD A, (DE)"),
    0x1B => println!("DEC DE"),
    0x1C => println!("INC E"),
    0x1D => println!("DEC E"),
    0x1E => println!("LD E, {:#02x}", mem[pos + 1]),
    0x1F => println!("RRA"),
    0x20 => println!("JR NZ, {}", mem[pos + 1] as i8),
    0x21 => println!("LD HL, {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0x22 => println!("LD (HL), A"),
    0x23 => println!("INC HL"),
    0x24 => println!("INC H"),
    0x25 => println!("DEC H"),
    0x26 => println!("LD H, {:#02x}", mem[pos + 1]),
    0x27 => println!("DAA"),
    0x28 => println!("JR Z, {}", mem[pos + 1] as i8),
    0x29 => println!("ADD HL, HL"),
    0x2A => println!("LD A, (HL)"),
    0x2B => println!("DEC HL"),
    0x2C => println!("INC L"),
    0x2D => println!("DEC L"),
    0x2E => println!("LD L, {:#02x}", mem[pos + 1]),
    0x2F => println!("CPL"),
    0x30 => println!("JR NC, {}", mem[pos + 1] as i8),
    0x31 => println!("LD SP, {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0x32 => println!("LD (HL), A"),
    0x33 => println!("INC SP"),
    0x34 => println!("INC (HL)"),
    0x35 => println!("DEC (HL)"),
    0x36 => println!("LD (HL), {:#02x}", mem[pos + 1]),
    0x37 => println!("SCF"),
    0x38 => println!("JR C, {}", mem[pos + 1] as i8),
    0x39 => println!("ADD HL, SP"),
    0x3A => println!("LD A, (HL)"),
    0x3B => println!("DEC SP"),
    0x3C => println!("INC A"),
    0x3D => println!("DEC A"),
    0x3E => println!("LD A, {:#02x}", mem[pos + 1]),
    0x3F => println!("CCF"),
    0x40 => println!("LD B, B"),
    0x41 => println!("LD B, C"),
    0x42 => println!("LD B, D"),
    0x43 => println!("LD B, E"),
    0x44 => println!("LD B, H"),
    0x45 => println!("LD B, L"),
    0x46 => println!("LD B, (HL)"),
    0x47 => println!("LD B, A"),
    0x48 => println!("LD C, B"),
    0x49 => println!("LD C, C"),
    0x4A => println!("LD C, D"),
    0x4B => println!("LD C, E"),
    0x4C => println!("LD C, H"),
    0x4D => println!("LD C, L"),
    0x4E => println!("LD C, (HL)"),
    0x4F => println!("LD C, A"),
    0x50 => println!("LD D, B"),
    0x51 => println!("LD D, C"),
    0x52 => println!("LD D, D"),
    0x53 => println!("LD D, E"),
    0x54 => println!("LD D, H"),
    0x55 => println!("LD D, L"),
    0x56 => println!("LD D, (HL)"),
    0x57 => println!("LD D, A"),
    0x58 => println!("LD E, B"),
    0x59 => println!("LD E, C"),
    0x5A => println!("LD E, D"),
    0x5B => println!("LD E, E"),
    0x5C => println!("LD E, H"),
    0x5D => println!("LD E, L"),
    0x5E => println!("LD E, (HL)"),
    0x5F => println!("LD E, A"),
    0x60 => println!("LD H, B"),
    0x61 => println!("LD H, C"),
    0x62 => println!("LD H, D"),
    0x63 => println!("LD H, E"),
    0x64 => println!("LD H, H"),
    0x65 => println!("LD H, L"),
    0x66 => println!("LD H, (HL)"),
    0x67 => println!("LD H, A"),
    0x68 => println!("LD L, B"),
    0x69 => println!("LD L, C"),
    0x6A => println!("LD L, D"),
    0x6B => println!("LD L, E"),
    0x6C => println!("LD L, H"),
    0x6D => println!("LD L, L"),
    0x6E => println!("LD L, (HL)"),
    0x6F => println!("LD L, A"),
    0x70 => println!("LD (HL), B"),
    0x71 => println!("LD (HL), C"),
    0x72 => println!("LD (HL), D"),
    0x73 => println!("LD (HL), E"),
    0x74 => println!("LD (HL), H"),
    0x75 => println!("LD (HL), L"),
    0x76 => println!("HALT"),
    0x77 => println!("LD (HL), A"),
    0x78 => println!("LD A, B"),
    0x79 => println!("LD A, C"),
    0x7A => println!("LD A, D"),
    0x7B => println!("LD A, E"),
    0x7C => println!("LD A, H"),
    0x7D => println!("LD A, L"),
    0x7E => println!("LD A, (HL)"),
    0x7F => println!("LD A, A"),
    0x80 => println!("ADD A, B"),
    0x81 => println!("ADD A, C"),
    0x82 => println!("ADD A, D"),
    0x83 => println!("ADD A, E"),
    0x84 => println!("ADD A, H"),
    0x85 => println!("ADD A, L"),
    0x86 => println!("ADD A, (HL)"),
    0x87 => println!("ADD A, A"),
    0x88 => println!("ADC A, B"),
    0x89 => println!("ADC A, C"),
    0x8A => println!("ADC A, D"),
    0x8B => println!("ADC A, E"),
    0x8C => println!("ADC A, H"),
    0x8D => println!("ADC A, L"),
    0x8E => println!("ADC A, (HL)"),
    0x8F => println!("ADC A, A"),
    0x90 => println!("SUB B"),
    0x91 => println!("SUB C"),
    0x92 => println!("SUB D"),
    0x93 => println!("SUB E"),
    0x94 => println!("SUB H"),
    0x95 => println!("SUB L"),
    0x96 => println!("SUB (HL)"),
    0x97 => println!("SUB A"),
    0x98 => println!("SBC A, B"),
    0x99 => println!("SBC A, C"),
    0x9A => println!("SBC A, D"),
    0x9B => println!("SBC A, E"),
    0x9C => println!("SBC A, H"),
    0x9D => println!("SBC A, L"),
    0x9E => println!("SBC A, (HL)"),
    0x9F => println!("SBC A, A"),
    0xA0 => println!("AND B"),
    0xA1 => println!("AND C"),
    0xA2 => println!("AND D"),
    0xA3 => println!("AND E"),
    0xA4 => println!("AND H"),
    0xA5 => println!("AND L"),
    0xA6 => println!("AND (HL)"),
    0xA7 => println!("AND A"),
    0xA8 => println!("XOR B"),
    0xA9 => println!("XOR C"),
    0xAA => println!("XOR D"),
    0xAB => println!("XOR E"),
    0xAC => println!("XOR H"),
    0xAD => println!("XOR L"),
    0xAE => println!("XOR (HL)"),
    0xAF => println!("XOR A"),
    0xB0 => println!("OR B"),
    0xB1 => println!("OR C"),
    0xB2 => println!("OR D"),
    0xB3 => println!("OR E"),
    0xB4 => println!("OR H"),
    0xB5 => println!("OR L"),
    0xB6 => println!("OR (HL)"),
    0xB7 => println!("OR A"),
    0xB8 => println!("CP B"),
    0xB9 => println!("CP C"),
    0xBA => println!("CP D"),
    0xBB => println!("CP E"),
    0xBC => println!("CP H"),
    0xBD => println!("CP L"),
    0xBE => println!("CP (HL)"),
    0xBF => println!("CP A"),
    0xC0 => println!("RET NZ"),
    0xC1 => println!("POP BC"),
    0xC2 => println!("JP NZ, {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0xC3 => println!("JP {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0xC4 => println!("CALL NZ, {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0xC5 => println!("PUSH BC"),
    0xC6 => println!("ADD A, {:#02x}", mem[pos + 1]),
    0xC7 => println!("RST 00H"),
    0xC8 => println!("RET Z"),
    0xC9 => println!("RET"),
    0xCA => println!("JP Z, {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0xCB => println!("PREFIX"),
    0xCC => println!("CALL Z, {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0xCD => println!("CALL {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0xCE => println!("ADC A, {:#02x}", mem[pos + 1]),
    0xCF => println!("RST 08H"),
    0xD0 => println!("RET NC"),
    0xD1 => println!("POP DE"),
    0xD2 => println!("JP NC, {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0xD3 => println!("ILLEGAL_D3"),
    0xD4 => println!("CALL NC, {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0xD5 => println!("PUSH DE"),
    0xD6 => println!("SUB {:#02x}", mem[pos + 1]),
    0xD7 => println!("RST 10H"),
    0xD8 => println!("RET C"),
    0xD9 => println!("RETI"),
    0xDA => println!("JP C, {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0xDB => println!("ILLEGAL_DB"),
    0xDC => println!("CALL C, {:#04x}", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0xDD => println!("ILLEGAL_DD"),
    0xDE => println!("SBC A, {:#02x}", mem[pos + 1]),
    0xDF => println!("RST 18H"),
    0xE0 => println!("LDH ({:#02x}), A", mem[pos + 1]),
    0xE1 => println!("POP HL"),
    0xE2 => println!("LD (C), A"),
    0xE3 => println!("ILLEGAL_E3"),
    0xE4 => println!("ILLEGAL_E4"),
    0xE5 => println!("PUSH HL"),
    0xE6 => println!("AND {:#02x}", mem[pos + 1]),
    0xE7 => println!("RST 20H"),
    0xE8 => println!("ADD SP, {}", mem[pos + 1] as i8),
    0xE9 => println!("JP HL"),
    0xEA => println!("LD ({:#04x}), A", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0xEB => println!("ILLEGAL_EB"),
    0xEC => println!("ILLEGAL_EC"),
    0xED => println!("ILLEGAL_ED"),
    0xEE => println!("XOR {:#02x}", mem[pos + 1]),
    0xEF => println!("RST 28H"),
    0xF0 => println!("LDH A, ({:#02x})", mem[pos + 1]),
    0xF1 => println!("POP AF"),
    0xF2 => println!("LD A, (C)"),
    0xF3 => println!("DI"),
    0xF4 => println!("ILLEGAL_F4"),
    0xF5 => println!("PUSH AF"),
    0xF6 => println!("OR {:#02x}", mem[pos + 1]),
    0xF7 => println!("RST 30H"),
    0xF8 => println!("LD HL, SP, {}", mem[pos + 1] as i8),
    0xF9 => println!("LD SP, HL"),
    0xFA => println!("LD A, ({:#04x})", (mem[pos + 1] as u16) | ((mem[pos + 2] as u16) << 8)),
    0xFB => println!("EI"),
    0xFC => println!("ILLEGAL_FC"),
    0xFD => println!("ILLEGAL_FD"),
    0xFE => println!("CP {:#02x}", mem[pos + 1]),
    0xFF => println!("RST 38H"),
    }
}

fn disassemble_prefixed(mem: &[u8], pos: usize) {
    match mem[pos] {
    0x00 => println!("RLC B"),
    0x01 => println!("RLC C"),
    0x02 => println!("RLC D"),
    0x03 => println!("RLC E"),
    0x04 => println!("RLC H"),
    0x05 => println!("RLC L"),
    0x06 => println!("RLC (HL)"),
    0x07 => println!("RLC A"),
    0x08 => println!("RRC B"),
    0x09 => println!("RRC C"),
    0x0A => println!("RRC D"),
    0x0B => println!("RRC E"),
    0x0C => println!("RRC H"),
    0x0D => println!("RRC L"),
    0x0E => println!("RRC (HL)"),
    0x0F => println!("RRC A"),
    0x10 => println!("RL B"),
    0x11 => println!("RL C"),
    0x12 => println!("RL D"),
    0x13 => println!("RL E"),
    0x14 => println!("RL H"),
    0x15 => println!("RL L"),
    0x16 => println!("RL (HL)"),
    0x17 => println!("RL A"),
    0x18 => println!("RR B"),
    0x19 => println!("RR C"),
    0x1A => println!("RR D"),
    0x1B => println!("RR E"),
    0x1C => println!("RR H"),
    0x1D => println!("RR L"),
    0x1E => println!("RR (HL)"),
    0x1F => println!("RR A"),
    0x20 => println!("SLA B"),
    0x21 => println!("SLA C"),
    0x22 => println!("SLA D"),
    0x23 => println!("SLA E"),
    0x24 => println!("SLA H"),
    0x25 => println!("SLA L"),
    0x26 => println!("SLA (HL)"),
    0x27 => println!("SLA A"),
    0x28 => println!("SRA B"),
    0x29 => println!("SRA C"),
    0x2A => println!("SRA D"),
    0x2B => println!("SRA E"),
    0x2C => println!("SRA H"),
    0x2D => println!("SRA L"),
    0x2E => println!("SRA (HL)"),
    0x2F => println!("SRA A"),
    0x30 => println!("SWAP B"),
    0x31 => println!("SWAP C"),
    0x32 => println!("SWAP D"),
    0x33 => println!("SWAP E"),
    0x34 => println!("SWAP H"),
    0x35 => println!("SWAP L"),
    0x36 => println!("SWAP (HL)"),
    0x37 => println!("SWAP A"),
    0x38 => println!("SRL B"),
    0x39 => println!("SRL C"),
    0x3A => println!("SRL D"),
    0x3B => println!("SRL E"),
    0x3C => println!("SRL H"),
    0x3D => println!("SRL L"),
    0x3E => println!("SRL (HL)"),
    0x3F => println!("SRL A"),
    0x40 => println!("BIT 0, B"),
    0x41 => println!("BIT 0, C"),
    0x42 => println!("BIT 0, D"),
    0x43 => println!("BIT 0, E"),
    0x44 => println!("BIT 0, H"),
    0x45 => println!("BIT 0, L"),
    0x46 => println!("BIT 0, (HL)"),
    0x47 => println!("BIT 0, A"),
    0x48 => println!("BIT 1, B"),
    0x49 => println!("BIT 1, C"),
    0x4A => println!("BIT 1, D"),
    0x4B => println!("BIT 1, E"),
    0x4C => println!("BIT 1, H"),
    0x4D => println!("BIT 1, L"),
    0x4E => println!("BIT 1, (HL)"),
    0x4F => println!("BIT 1, A"),
    0x50 => println!("BIT 2, B"),
    0x51 => println!("BIT 2, C"),
    0x52 => println!("BIT 2, D"),
    0x53 => println!("BIT 2, E"),
    0x54 => println!("BIT 2, H"),
    0x55 => println!("BIT 2, L"),
    0x56 => println!("BIT 2, (HL)"),
    0x57 => println!("BIT 2, A"),
    0x58 => println!("BIT 3, B"),
    0x59 => println!("BIT 3, C"),
    0x5A => println!("BIT 3, D"),
    0x5B => println!("BIT 3, E"),
    0x5C => println!("BIT 3, H"),
    0x5D => println!("BIT 3, L"),
    0x5E => println!("BIT 3, (HL)"),
    0x5F => println!("BIT 3, A"),
    0x60 => println!("BIT 4, B"),
    0x61 => println!("BIT 4, C"),
    0x62 => println!("BIT 4, D"),
    0x63 => println!("BIT 4, E"),
    0x64 => println!("BIT 4, H"),
    0x65 => println!("BIT 4, L"),
    0x66 => println!("BIT 4, (HL)"),
    0x67 => println!("BIT 4, A"),
    0x68 => println!("BIT 5, B"),
    0x69 => println!("BIT 5, C"),
    0x6A => println!("BIT 5, D"),
    0x6B => println!("BIT 5, E"),
    0x6C => println!("BIT 5, H"),
    0x6D => println!("BIT 5, L"),
    0x6E => println!("BIT 5, (HL)"),
    0x6F => println!("BIT 5, A"),
    0x70 => println!("BIT 6, B"),
    0x71 => println!("BIT 6, C"),
    0x72 => println!("BIT 6, D"),
    0x73 => println!("BIT 6, E"),
    0x74 => println!("BIT 6, H"),
    0x75 => println!("BIT 6, L"),
    0x76 => println!("BIT 6, (HL)"),
    0x77 => println!("BIT 6, A"),
    0x78 => println!("BIT 7, B"),
    0x79 => println!("BIT 7, C"),
    0x7A => println!("BIT 7, D"),
    0x7B => println!("BIT 7, E"),
    0x7C => println!("BIT 7, H"),
    0x7D => println!("BIT 7, L"),
    0x7E => println!("BIT 7, (HL)"),
    0x7F => println!("BIT 7, A"),
    0x80 => println!("RES 0, B"),
    0x81 => println!("RES 0, C"),
    0x82 => println!("RES 0, D"),
    0x83 => println!("RES 0, E"),
    0x84 => println!("RES 0, H"),
    0x85 => println!("RES 0, L"),
    0x86 => println!("RES 0, (HL)"),
    0x87 => println!("RES 0, A"),
    0x88 => println!("RES 1, B"),
    0x89 => println!("RES 1, C"),
    0x8A => println!("RES 1, D"),
    0x8B => println!("RES 1, E"),
    0x8C => println!("RES 1, H"),
    0x8D => println!("RES 1, L"),
    0x8E => println!("RES 1, (HL)"),
    0x8F => println!("RES 1, A"),
    0x90 => println!("RES 2, B"),
    0x91 => println!("RES 2, C"),
    0x92 => println!("RES 2, D"),
    0x93 => println!("RES 2, E"),
    0x94 => println!("RES 2, H"),
    0x95 => println!("RES 2, L"),
    0x96 => println!("RES 2, (HL)"),
    0x97 => println!("RES 2, A"),
    0x98 => println!("RES 3, B"),
    0x99 => println!("RES 3, C"),
    0x9A => println!("RES 3, D"),
    0x9B => println!("RES 3, E"),
    0x9C => println!("RES 3, H"),
    0x9D => println!("RES 3, L"),
    0x9E => println!("RES 3, (HL)"),
    0x9F => println!("RES 3, A"),
    0xA0 => println!("RES 4, B"),
    0xA1 => println!("RES 4, C"),
    0xA2 => println!("RES 4, D"),
    0xA3 => println!("RES 4, E"),
    0xA4 => println!("RES 4, H"),
    0xA5 => println!("RES 4, L"),
    0xA6 => println!("RES 4, (HL)"),
    0xA7 => println!("RES 4, A"),
    0xA8 => println!("RES 5, B"),
    0xA9 => println!("RES 5, C"),
    0xAA => println!("RES 5, D"),
    0xAB => println!("RES 5, E"),
    0xAC => println!("RES 5, H"),
    0xAD => println!("RES 5, L"),
    0xAE => println!("RES 5, (HL)"),
    0xAF => println!("RES 5, A"),
    0xB0 => println!("RES 6, B"),
    0xB1 => println!("RES 6, C"),
    0xB2 => println!("RES 6, D"),
    0xB3 => println!("RES 6, E"),
    0xB4 => println!("RES 6, H"),
    0xB5 => println!("RES 6, L"),
    0xB6 => println!("RES 6, (HL)"),
    0xB7 => println!("RES 6, A"),
    0xB8 => println!("RES 7, B"),
    0xB9 => println!("RES 7, C"),
    0xBA => println!("RES 7, D"),
    0xBB => println!("RES 7, E"),
    0xBC => println!("RES 7, H"),
    0xBD => println!("RES 7, L"),
    0xBE => println!("RES 7, (HL)"),
    0xBF => println!("RES 7, A"),
    0xC0 => println!("SET 0, B"),
    0xC1 => println!("SET 0, C"),
    0xC2 => println!("SET 0, D"),
    0xC3 => println!("SET 0, E"),
    0xC4 => println!("SET 0, H"),
    0xC5 => println!("SET 0, L"),
    0xC6 => println!("SET 0, (HL)"),
    0xC7 => println!("SET 0, A"),
    0xC8 => println!("SET 1, B"),
    0xC9 => println!("SET 1, C"),
    0xCA => println!("SET 1, D"),
    0xCB => println!("SET 1, E"),
    0xCC => println!("SET 1, H"),
    0xCD => println!("SET 1, L"),
    0xCE => println!("SET 1, (HL)"),
    0xCF => println!("SET 1, A"),
    0xD0 => println!("SET 2, B"),
    0xD1 => println!("SET 2, C"),
    0xD2 => println!("SET 2, D"),
    0xD3 => println!("SET 2, E"),
    0xD4 => println!("SET 2, H"),
    0xD5 => println!("SET 2, L"),
    0xD6 => println!("SET 2, (HL)"),
    0xD7 => println!("SET 2, A"),
    0xD8 => println!("SET 3, B"),
    0xD9 => println!("SET 3, C"),
    0xDA => println!("SET 3, D"),
    0xDB => println!("SET 3, E"),
    0xDC => println!("SET 3, H"),
    0xDD => println!("SET 3, L"),
    0xDE => println!("SET 3, (HL)"),
    0xDF => println!("SET 3, A"),
    0xE0 => println!("SET 4, B"),
    0xE1 => println!("SET 4, C"),
    0xE2 => println!("SET 4, D"),
    0xE3 => println!("SET 4, E"),
    0xE4 => println!("SET 4, H"),
    0xE5 => println!("SET 4, L"),
    0xE6 => println!("SET 4, (HL)"),
    0xE7 => println!("SET 4, A"),
    0xE8 => println!("SET 5, B"),
    0xE9 => println!("SET 5, C"),
    0xEA => println!("SET 5, D"),
    0xEB => println!("SET 5, E"),
    0xEC => println!("SET 5, H"),
    0xED => println!("SET 5, L"),
    0xEE => println!("SET 5, (HL)"),
    0xEF => println!("SET 5, A"),
    0xF0 => println!("SET 6, B"),
    0xF1 => println!("SET 6, C"),
    0xF2 => println!("SET 6, D"),
    0xF3 => println!("SET 6, E"),
    0xF4 => println!("SET 6, H"),
    0xF5 => println!("SET 6, L"),
    0xF6 => println!("SET 6, (HL)"),
    0xF7 => println!("SET 6, A"),
    0xF8 => println!("SET 7, B"),
    0xF9 => println!("SET 7, C"),
    0xFA => println!("SET 7, D"),
    0xFB => println!("SET 7, E"),
    0xFC => println!("SET 7, H"),
    0xFD => println!("SET 7, L"),
    0xFE => println!("SET 7, (HL)"),
    0xFF => println!("SET 7, A"),
    }
}

